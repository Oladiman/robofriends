{"version":3,"sources":["components/Searchbox.js","components/Card.js","components/Cardlist.js","robots.js","containers/App.js","serviceWorker.js","index.js"],"names":["Searchbox","searchfield","searchChange","className","type","placeholder","onChange","Card","name","id","email","alt","src","Cardlist","robots","map","user","i","key","username","App","onSearchChange","event","setState","target","value","state","this","filteredRobots","filter","robot","toLowerCase","includes","Component","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"+OAceA,EAZG,SAAC,GAA+B,EAA9BC,YAA+B,IAAlBC,EAAiB,EAAjBA,aAC7B,OACI,6BACI,2BACAC,UAAU,mCACVC,KAAK,SAASC,YAAY,eAC1BC,SAAUJ,MCKPK,EAZF,SAAC,GAAoB,IAAnBC,EAAkB,EAAlBA,KAAKC,EAAa,EAAbA,GAAGC,EAAU,EAAVA,MACnB,OACI,yBAAKP,UAAU,wDACf,yBAAKQ,IAAI,UAAUC,IAAG,+BAA0BH,EAA1B,cAClB,4BAAKD,GACL,2BAAIE,KCWDG,EAfE,SAAC,GAAY,IAAXC,EAAU,EAAVA,OACnB,OACI,6BAEIA,EAAOC,IAAI,SAACC,EAAKC,GACjB,OACI,kBAAC,EAAD,CAAMC,IAAKD,EAAGR,GAAIK,EAAOG,GAAGR,GAAID,KAAMM,EAAOG,GAAGT,KAAME,MAAOI,EAAOG,GAAGP,YCRtEI,EAAS,CAClB,CACEL,GAAI,EACJD,KAAM,gBACNW,SAAU,OACVT,MAAO,qBAET,CACED,GAAI,EACJD,KAAM,eACNW,SAAU,YACVT,MAAO,qBAET,CACED,GAAI,EACJD,KAAM,mBACNW,SAAU,WACVT,MAAO,sBAET,CACED,GAAI,EACJD,KAAM,mBACNW,SAAU,WACVT,MAAO,6BAET,CACED,GAAI,EACJD,KAAM,mBACNW,SAAU,SACVT,MAAO,4BAET,CACED,GAAI,EACJD,KAAM,uBACNW,SAAU,mBACVT,MAAO,2BAET,CACED,GAAI,EACJD,KAAM,kBACNW,SAAU,eACVT,MAAO,0BAET,CACED,GAAI,EACJD,KAAM,2BACNW,SAAU,gBACVT,MAAO,wBAET,CACED,GAAI,EACJD,KAAM,kBACNW,SAAU,WACVT,MAAO,2BAET,CACED,GAAI,GACJD,KAAM,qBACNW,SAAU,iBACVT,MAAO,2BCjBEU,G,kBAjCX,aAAc,IAAD,8BACT,+CAMJC,eAAgB,SAACC,GACb,EAAKC,SAAS,CAACtB,YAAYqB,EAAME,OAAOC,SANxC,EAAKC,MAAM,CACPZ,OAAOA,EACPb,YAAY,IAJP,E,sEAYJ,IAAD,EACwB0B,KAAKD,MAA1BZ,EADH,EACGA,OAAQb,EADX,EACWA,YACT2B,EAAed,EAAOe,OAAO,SAAAC,GAC/B,OAAOA,EAAMtB,KAAKuB,cAAcC,SAAS/B,EAAY8B,iBAEzD,OACI,yBAAK5B,UAAU,MACX,wBAAIA,UAAU,MAAd,eACA,kBAAC,EAAD,CAAYD,aAAcyB,KAAKN,iBAC/B,gCACA,kBAAC,EAAD,CAAUP,OAAQc,U,GAvBhBK,cCIEC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2D,MCVNC,IAASC,OAAO,kBAAC,EAAD,MAChBC,SAASC,eAAe,SDwHlB,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC,gB","file":"static/js/main.d9c8c3fe.chunk.js","sourcesContent":["import React from 'react';\n\nconst Searchbox = ({searchfield, searchChange}) =>{\n    return(\n        <div>\n            <input \n            className='pa3 ba b--green bg-lightest-blue' \n            type='search' placeholder='Search robot'\n            onChange={searchChange}\n            />\n        </div>\n        \n    );\n}\nexport default Searchbox;","import React from 'react';\nconst Card = ({name,id,email}) =>{\n    return(\n        <div className='tc bg-light-silver dib br3 pa3 ma2 grow bw2 shadow-5'>\n        <img alt=\"robots \" src={`https://robohash.org/${id}?200x200`} />\n            <h2>{name}</h2>\n            <p>{email}</p>\n        </div>\n        \n\n       \n    );\n}\nexport default Card;","import React from 'react';\nimport Card from './Card'\nconst Cardlist = ({robots})=>{\nreturn (\n    <div>\n    {\n        robots.map((user,i) => {\n        return (\n            <Card key={i} id={robots[i].id} name={robots[i].name} email={robots[i].email}/>\n        );\n\n    })\n    }\n    </div>\n);\n\n}\nexport default Cardlist;\n","export const robots = [\n    {\n      id: 1,\n      name: 'Leanne Graham',\n      username: 'Bret',\n      email: 'Sincere@april.biz'\n    },\n    {\n      id: 2,\n      name: 'Ervin Howell',\n      username: 'Antonette',\n      email: 'Shanna@melissa.tv'\n    },\n    {\n      id: 3,\n      name: 'Clementine Bauch',\n      username: 'Samantha',\n      email: 'Nathan@yesenia.net'\n    },\n    {\n      id: 4,\n      name: 'Patricia Lebsack',\n      username: 'Karianne',\n      email: 'Julianne.OConner@kory.org'\n    },\n    {\n      id: 5,\n      name: 'Chelsey Dietrich',\n      username: 'Kamren',\n      email: 'Lucio_Hettinger@annie.ca'\n    },\n    {\n      id: 6,\n      name: 'Mrs. Dennis Schulist',\n      username: 'Leopoldo_Corkery',\n      email: 'Karley_Dach@jasper.info'\n    },\n    {\n      id: 7,\n      name: 'Kurtis Weissnat',\n      username: 'Elwyn.Skiles',\n      email: 'Telly.Hoeger@billy.biz'\n    },\n    {\n      id: 8,\n      name: 'Nicholas Runolfsdottir V',\n      username: 'Maxime_Nienow',\n      email: 'Sherwood@rosamond.me'\n    },\n    {\n      id: 9,\n      name: 'Glenna Reichert',\n      username: 'Delphine',\n      email: 'Chaim_McDermott@dana.io'\n    },\n    {\n      id: 10,\n      name: 'Clementina DuBuque',\n      username: 'Moriah.Stanton',\n      email: 'Rey.Padberg@karina.biz'\n    }\n  ];\n  ","import React,{Component} from 'react';\nimport Searchbox from '../components/Searchbox';\nimport Cardlist from '../components/Cardlist';\nimport {robots} from '../robots';\nimport scroll from '../components/scroll';\nimport './App.css'\n\n\nclass App extends Component {\n    constructor(){\n        super()\n        this.state={\n            robots:robots,\n            searchfield:'',\n        }\n    }\n    onSearchChange =(event)=>{\n        this.setState({searchfield:event.target.value})\n        \n\n    }\n    render(){\n        const {robots, searchfield}=this.state;\n        const filteredRobots=robots.filter(robot=>{\n            return robot.name.toLowerCase().includes(searchfield.toLowerCase());\n        })\n        return(\n            <div className='tc'>\n                <h1 className='f1'>ROBOFRIENDS</h1>\n                <Searchbox  searchChange={this.onSearchChange}/>\n                <scroll>\n                <Cardlist robots={filteredRobots}/>\n                </scroll>\n\n            </div>\n    \n        );\n\n    }\n\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\n\nimport App from './containers/App';\nimport * as serviceWorker from './serviceWorker';\nimport 'tachyons';\n\nReactDOM.render(<App />, \ndocument.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}