{"version":3,"sources":["components/Searchbox.js","components/Card.js","components/Cardlist.js","robots.js","containers/App.js","serviceWorker.js","index.js"],"names":["Searchbox","searchfield","searchChange","className","type","placeholder","onChange","Card","name","id","email","alt","src","Cardlist","robots","map","user","i","key","username","App","onSearchChange","event","setState","target","value","state","this","filteredRobots","filter","robot","toLowerCase","includes","Component","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"+OAceA,EAZG,SAAC,GAA+B,EAA9BC,YAA+B,IAAlBC,EAAiB,EAAjBA,aAC7B,OACI,6BACI,2BACAC,UAAU,mCACVC,KAAK,SAASC,YAAY,eAC1BC,SAAUJ,MCKPK,EAZF,SAAC,GAAoB,IAAnBC,EAAkB,EAAlBA,KAAKC,EAAa,EAAbA,GAAGC,EAAU,EAAVA,MACnB,OACI,yBAAKP,UAAU,wDACf,yBAAKQ,IAAI,UAAUC,IAAG,+BAA0BH,EAA1B,cAClB,4BAAKD,GACL,2BAAIE,KCWDG,EAfE,SAAC,GAAY,IAAXC,EAAU,EAAVA,OACnB,OACI,6BAEIA,EAAOC,IAAI,SAACC,EAAKC,GACjB,OACI,kBAAC,EAAD,CAAMC,IAAKD,EAAGR,GAAIK,EAAOG,GAAGR,GAAID,KAAMM,EAAOG,GAAGT,KAAME,MAAOI,EAAOG,GAAGP,YCRtEI,EAAS,CAClB,CACEL,GAAI,EACJD,KAAM,gBACNW,SAAU,OACVT,MAAO,qBAET,CACED,GAAI,EACJD,KAAM,eACNW,SAAU,YACVT,MAAO,qBAET,CACED,GAAI,EACJD,KAAM,mBACNW,SAAU,WACVT,MAAO,sBAET,CACED,GAAI,EACJD,KAAM,mBACNW,SAAU,WACVT,MAAO,6BAET,CACED,GAAI,EACJD,KAAM,mBACNW,SAAU,SACVT,MAAO,4BAET,CACED,GAAI,EACJD,KAAM,uBACNW,SAAU,mBACVT,MAAO,2BAET,CACED,GAAI,EACJD,KAAM,kBACNW,SAAU,eACVT,MAAO,0BAET,CACED,GAAI,EACJD,KAAM,2BACNW,SAAU,gBACVT,MAAO,wBAET,CACED,GAAI,EACJD,KAAM,kBACNW,SAAU,WACVT,MAAO,2BAET,CACED,GAAI,GACJD,KAAM,qBACNW,SAAU,iBACVT,MAAO,2BCjBEU,G,kBAjCX,aAAc,IAAD,8BACT,+CAMJC,eAAgB,SAACC,GACb,EAAKC,SAAS,CAACtB,YAAYqB,EAAME,OAAOC,SANxC,EAAKC,MAAM,CACPZ,OAAOA,EACPb,YAAY,IAJP,E,sEAYJ,IAAD,EACwB0B,KAAKD,MAA1BZ,EADH,EACGA,OAAQb,EADX,EACWA,YACT2B,EAAed,EAAOe,OAAO,SAAAC,GAC/B,OAAOA,EAAMtB,KAAKuB,cAAcC,SAAS/B,EAAY8B,iBAEzD,OACI,yBAAK5B,UAAU,MACX,wBAAIA,UAAU,MAAd,eACA,kBAAC,EAAD,CAAYD,aAAcyB,KAAKN,iBAC/B,gCACA,kBAAC,EAAD,CAAUP,OAAQc,U,GAvBhBK,cCIEC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2D,MCVNC,IAASC,OAAO,kBAAC,EAAD,MAChBC,SAASC,eAAe,SDwHlB,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC,gB","file":"static/js/main.05629b3a.chunk.js","sourcesContent":["import React from 'react';\r\n\r\nconst Searchbox = ({searchfield, searchChange}) =>{\r\n    return(\r\n        <div>\r\n            <input \r\n            className='pa3 ba b--green bg-lightest-blue' \r\n            type='search' placeholder='Search robot'\r\n            onChange={searchChange}\r\n            />\r\n        </div>\r\n        \r\n    );\r\n}\r\nexport default Searchbox;","import React from 'react';\r\nconst Card = ({name,id,email}) =>{\r\n    return(\r\n        <div className='tc bg-light-silver dib br3 pa3 ma2 grow bw2 shadow-5'>\r\n        <img alt=\"robots \" src={`https://robohash.org/${id}?200x200`} />\r\n            <h2>{name}</h2>\r\n            <p>{email}</p>\r\n        </div>\r\n        \r\n\r\n       \r\n    );\r\n}\r\nexport default Card;","import React from 'react';\r\nimport Card from './Card'\r\nconst Cardlist = ({robots})=>{\r\nreturn (\r\n    <div>\r\n    {\r\n        robots.map((user,i) => {\r\n        return (\r\n            <Card key={i} id={robots[i].id} name={robots[i].name} email={robots[i].email}/>\r\n        );\r\n\r\n    })\r\n    }\r\n    </div>\r\n);\r\n\r\n}\r\nexport default Cardlist;\r\n","export const robots = [\r\n    {\r\n      id: 1,\r\n      name: 'Leanne Graham',\r\n      username: 'Bret',\r\n      email: 'Sincere@april.biz'\r\n    },\r\n    {\r\n      id: 2,\r\n      name: 'Ervin Howell',\r\n      username: 'Antonette',\r\n      email: 'Shanna@melissa.tv'\r\n    },\r\n    {\r\n      id: 3,\r\n      name: 'Clementine Bauch',\r\n      username: 'Samantha',\r\n      email: 'Nathan@yesenia.net'\r\n    },\r\n    {\r\n      id: 4,\r\n      name: 'Patricia Lebsack',\r\n      username: 'Karianne',\r\n      email: 'Julianne.OConner@kory.org'\r\n    },\r\n    {\r\n      id: 5,\r\n      name: 'Chelsey Dietrich',\r\n      username: 'Kamren',\r\n      email: 'Lucio_Hettinger@annie.ca'\r\n    },\r\n    {\r\n      id: 6,\r\n      name: 'Mrs. Dennis Schulist',\r\n      username: 'Leopoldo_Corkery',\r\n      email: 'Karley_Dach@jasper.info'\r\n    },\r\n    {\r\n      id: 7,\r\n      name: 'Kurtis Weissnat',\r\n      username: 'Elwyn.Skiles',\r\n      email: 'Telly.Hoeger@billy.biz'\r\n    },\r\n    {\r\n      id: 8,\r\n      name: 'Nicholas Runolfsdottir V',\r\n      username: 'Maxime_Nienow',\r\n      email: 'Sherwood@rosamond.me'\r\n    },\r\n    {\r\n      id: 9,\r\n      name: 'Glenna Reichert',\r\n      username: 'Delphine',\r\n      email: 'Chaim_McDermott@dana.io'\r\n    },\r\n    {\r\n      id: 10,\r\n      name: 'Clementina DuBuque',\r\n      username: 'Moriah.Stanton',\r\n      email: 'Rey.Padberg@karina.biz'\r\n    }\r\n  ];\r\n  ","import React,{Component} from 'react';\r\nimport Searchbox from '../components/Searchbox';\r\nimport Cardlist from '../components/Cardlist';\r\nimport {robots} from '../robots';\r\nimport scroll from '../components/scroll';\r\nimport './App.css'\r\n\r\n\r\nclass App extends Component {\r\n    constructor(){\r\n        super()\r\n        this.state={\r\n            robots:robots,\r\n            searchfield:'',\r\n        }\r\n    }\r\n    onSearchChange =(event)=>{\r\n        this.setState({searchfield:event.target.value})\r\n        \r\n\r\n    }\r\n    render(){\r\n        const {robots, searchfield}=this.state;\r\n        const filteredRobots=robots.filter(robot=>{\r\n            return robot.name.toLowerCase().includes(searchfield.toLowerCase());\r\n        })\r\n        return(\r\n            <div className='tc'>\r\n                <h1 className='f1'>ROBOFRIENDS</h1>\r\n                <Searchbox  searchChange={this.onSearchChange}/>\r\n                <scroll>\r\n                <Cardlist robots={filteredRobots}/>\r\n                </scroll>\r\n\r\n            </div>\r\n    \r\n        );\r\n\r\n    }\r\n\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\n\r\nimport App from './containers/App';\r\nimport * as serviceWorker from './serviceWorker';\r\nimport 'tachyons';\r\n\r\nReactDOM.render(<App />, \r\ndocument.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}